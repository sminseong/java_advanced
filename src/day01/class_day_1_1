final 필드 : 초기값 설정 후 값을 변경할 수 없다.
final 클래스 : 클래스 선언 시 final 을 클래스 앞에 붙이면 최종적인 클래스이므로 더 이상 상속을 할 수 없다.
              부모 클래스가 될 수 없으므로 자식클래스를 만들 수 없다.
final 메소드 : 오버라이딩을 할 수 없다.

//
1. Car 클래스
    stop() 메소드를 final 선언하세요
    - 차를 멈춤 메세지 출력 후 speed 를 0으로 세팅합니다.
    speedUp() 메소드는 호출될 때마다 speed 가 1씩 증가합니다.

2. SportsCar 클래스
    Car 클래스를 상속합니다.
    speedUp() 기능을 호출 시 10씩 증가하도록 재정의합니다.

3. CarMain 클래스
    1. Car 클래스 타입 myCar1 생성하여 speed 를 3으로 세팅하고, 현재 speed 값 출력
    2. SportsCar 타입 myCar2 생성하여 speed 를 50으로 세팅하고 현재 speed 값 출력

4. protected 접근 제한자
    public, private 접근 제한자를 사용하여 객체 외부에서 필드, 생성자, 메소드의 접근 여부를 결정했다.
    접근대상 : 필드, 생성자, 메소드
    제한범위 : public 동일 패키지, 다른 패키지 제한 없이 모두 접근 가능
            private 내 클래스만 접근 가능
    protected 는 상속과 관련됨
    접근 대상 : 필드, 생성자, 메소드
    제한범위 : 같은 패키지이거나 자식 객체만 사용(접근) 가능

5. 타입변환
    타입을 다른 타입으로 변환하는 것을 의미한다.
    클래스의 타입변환은 상속관계에서 발생한다.
    - 자동타입변환 (promotion) : 자동으로 타입변환이 일어난다.

    //실습
    PromotionMain.java
    Cat 객체를 생성하고 이것을 Animal 변수에 대입하세요.
